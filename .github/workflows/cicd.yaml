name: Single-Job CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1) kubernetes-anotherclass-sprint2 (현재 Repo) 체크아웃
      - name: Checkout This Repository
        uses: actions/checkout@v4
      
      # 2) Set up Docker Buildx & QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3) Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4) Docker 이미지 빌드 & 푸시
      - name: Build and Push Docker Image
        id: build_and_push
        uses: docker/build-push-action@v4
        with:
          context: ./docker-test
          push: true
          tags: |
            ykim73094/aks-test:latest
            ykim73094/aks-test:${{ github.run_id }}  # 예시: run_id 기반 태그

      # 5) BUILD 스텝이 생성한 이미지 태그를 로컬 변수에 기록
      #    (여기서는 run_id를 태그로 했으나, timestamp/date 등 사용 가능)
      - name: Prepare Image Variable
        run: |
          IMAGE="ykim73094/aks-test:${{ github.run_id }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
        shell: bash

      # 6) argocd-example-apps 리포지토리 체크아웃
      - name: Checkout ArgoCD Repository
        uses: actions/checkout@v4
        with:
          repository: ykim73094/argocd-example-apps
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          ref: master

      # 7) YAML 수정 (Deployment)
      - name: Update Deployment YAML
        run: |
          # 로컬 환경변수에서 IMAGE 읽음
          if [ -z "$IMAGE" ]; then
            echo "ERROR: Docker image is empty! Exiting..."
            exit 1
          fi
          if ! grep -q "image:" guestbook/guestbook-ui-deployment.yaml; then
            echo "image: ykim73094/aks-test:latest" >> guestbook/guestbook-ui-deployment.yaml
          fi
          sed -i "s|image: .*|image: $IMAGE|" guestbook/guestbook-ui-deployment.yaml

          echo "Updated guestbook-ui-deployment.yaml:"
          cat guestbook/guestbook-ui-deployment.yaml

          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git pull --rebase origin master
          git add guestbook/guestbook-ui-deployment.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update deployment image to $IMAGE"
            git push origin master

      # 8) Argo CD CLI 설치
      - name: Install Argo CD CLI
        run: |
          if ! command -v argocd &> /dev/null; then
            echo "Installing ArgoCD CLI..."
            curl -sSL -o argocd-linux-amd64 \
              https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd-linux-amd64
            sudo mv argocd-linux-amd64 /usr/local/bin/argocd
          else
            echo "Argo CD CLI already installed."
          fi
        shell: bash

      # 9) Argo CD 로그인
      - name: Login to Argo CD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure --grpc-web
        shell: bash

      # 10) guestbook 애플리케이션 존재 여부 확인 & 생성
      - name: Ensure Guestbook App is Registered
        run: |
          if argocd app get guestbook > /dev/null 2>&1; then
            echo "guestbook application already exists."
          else
            echo "Creating guestbook application in Argo CD..."
            argocd app create guestbook \
              --repo https://github.com/ykim73094/argocd-example-apps.git \
              --path guestbook \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace default \
              --sync-policy automated
          fi
        shell: bash

      # 11) Auto-Sync 설정 (필요시)
      - name: Enable Auto-Sync in ArgoCD
        run: |
          argocd app set guestbook --sync-policy automated --auto-prune --self-heal
        shell: bash

      # 12) Argo CD Sync & Wait
      - name: Trigger Argo CD Sync
        run: |
          argocd app sync guestbook --grpc-web --insecure
          argocd app wait guestbook --health --operation --timeout 300
        shell: bash
