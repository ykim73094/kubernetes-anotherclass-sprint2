name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.image }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        id: set-image
        run: |
          IMAGE_NAME=ykim73094/aks-test
          TAG=$(date +%s)
          FULL_IMAGE="$IMAGE_NAME:$TAG"

          echo "::add-mask::$FULL_IMAGE"
          echo "image=$IMAGE_NAME:$TAG" >> $GITHUB_ENV
          echo "image=$IMAGE_NAME:$TAG" >> $GITHUB_OUTPUT
          echo "::debug::IMAGE=$FULL_IMAGE"
          
          docker build -t $FULL_IMAGE ./docker-test
          docker push $FULL_IMAGE

  update-manifest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: ykim73094/argocd-example-apps
          token: ${{ secrets.GH_PAT }}

      - name: Update Deployment YAML
        run: |
          sed -i "s|image: .*|image: ${{ needs.build.outputs.image }}|" guestbook/guestbook-ui-deployment.yaml

      - name: Commit and Push Changes
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          git fetch --all
          git checkout master  # ✅ master 브랜치 체크아웃
          
          # 🔥 변경 사항을 먼저 stash (임시 저장)
          git stash push -m "Temp changes" 

          # 🔥 최신 코드 가져오기
          git pull --rebase origin master

          # 🔥 stash된 변경 사항 복원
          git stash pop || echo "No stash found"

          # 🔥 변경 사항 확인 후 커밋 진행
          git add guestbook/guestbook-ui-deployment.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update deployment image to ${{ needs.build.outputs.image }}"
            git push origin master
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: update-manifest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Test Argo CD Connection
        run: |
          curl -k -I https://${{ secrets.ARGOCD_SERVER }} || echo "ArgoCD server is not reachable"

      - name: Login to Argo CD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure --grpc-web || echo "ArgoCD Login Failed"

      - name: Refresh Argo CD App
        run: |
          argocd app refresh guestbook --grpc-web --insecure

      - name: Trigger Argo CD Sync
        run: |
          argocd app sync guestbook --grpc-web --insecure
          argocd app wait guestbook --health --operation --timeout 300
