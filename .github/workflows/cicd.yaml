name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # ✅ main 브랜치에 Push될 때 실행

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # ✅ Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ✅ Docker 이미지 빌드 & 푸시
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=ykim73094/aks-test  # 🔥 Docker Hub에 저장할 이미지
          TAG=$(date +%s)
          docker build -t $IMAGE_NAME:$TAG ./docker-test
          docker push $IMAGE_NAME:$TAG
          echo "IMAGE=$IMAGE_NAME:$TAG" >> $GITHUB_ENV

  update-manifest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # ✅ Deployment YAML의 이미지 태그 업데이트
      - name: Update Deployment YAML
        run: |
          sed -i "s|image: .*|image: ${{ env.IMAGE }}|" k8s/deployment.yaml

      # ✅ 변경 사항이 있는 경우만 Git Commit & Push
      - name: Commit and Push Changes
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add k8s/deployment.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update deployment image to ${{ env.IMAGE }}"
            git push
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: update-manifest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # ✅ Argo CD CLI 설치 (설치되어 있지 않은 경우)
      - name: Install Argo CD CLI (if not installed)
        run: |
           if ! command -v argocd &> /dev/null
           then
             echo "Argo CD CLI not found, installing..."
             curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
             chmod +x argocd-linux-amd64
             sudo mv argocd-linux-amd64 /usr/local/bin/argocd
            else
             echo "Argo CD CLI already installed."
            fi

- name: Check ArgoCD Server Accessibility
  run: curl -v ${{ secrets.ARGOCD_SERVER }}
  
      # ✅ Argo CD 로그인
      - name: Login to Argo CD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure

      # ✅ Argo CD 애플리케이션 동기화 (배포)
      - name: Trigger Argo CD Sync
        run: |
          argocd app sync my-app
