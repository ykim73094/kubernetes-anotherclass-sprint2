name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.image }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Image Tag
        id: prepare-tag
        run: |
          TAG=$(date +%s)
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        id: build_and_push
        uses: docker/build-push-action@v4
        with:
          context: ./docker-test
          push: true
          tags: |
            ykim73094/aks-test:latest
            ykim73094/aks-test:${{ env.TAG }}

      - name: Set Output Image
        id: set-image
        run: |
          OUTPUT_IMAGE="ykim73094/aks-test:${{ env.TAG }}"
          echo "✅ Setting output image: $OUTPUT_IMAGE"

          # 🔸 Output key를 "built_image" 라는 새 이름으로 설정
          echo "built_image=$OUTPUT_IMAGE" >> $GITHUB_OUTPUT

          # (선택) 환경 변수 설정 - 굳이 필요없으면 생략
          echo "built_image=$OUTPUT_IMAGE" >> $GITHUB_ENV

  update-manifest:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout ArgoCD Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: ykim73094/argocd-example-apps
          token: ${{ secrets.GH_PAT }}

      - name: Ensure image field exists & Update Deployment YAML
        run: |
          IMAGE="${{ needs.build.outputs.built_image }}"
          if [ -z "$IMAGE" ]; then
            echo "⚠️ ERROR: Docker image is empty! Exiting..."
            exit 1
          fi

          # 'image:' 필드가 없다면 추가
          if ! grep -q "image:" guestbook/guestbook-ui-deployment.yaml; then
            echo "image: ykim73094/aks-test:latest" >> guestbook/guestbook-ui-deployment.yaml
          fi

          # 기존 이미지 업데이트
          sed -i "s|image: .*|image: $IMAGE|" guestbook/guestbook-ui-deployment.yaml

          echo "🔍 Updated guestbook-ui-deployment.yaml:"
          cat guestbook/guestbook-ui-deployment.yaml

      - name: Commit and Push Changes
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          git pull --rebase origin master
          git add guestbook/guestbook-ui-deployment.yaml

          if git diff --cached --quiet; then
            echo "✅ No changes to commit."
          else
            git commit -m "Update deployment image to $IMAGE"
            git push origin master

  deploy:
    runs-on: ubuntu-latest
    needs: update-manifest
    steps:
      - name: Checkout this repo (optional)
        uses: actions/checkout@v3

      - name: Install Argo CD CLI
        run: |
          if ! command -v argocd &> /dev/null; then
            echo "🚀 Installing ArgoCD CLI..."
            curl -sSL -o argocd-linux-amd64 \
              https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd-linux-amd64
            sudo mv argocd-linux-amd64 /usr/local/bin/argocd
          else
            echo "✅ Argo CD CLI already installed."

      - name: Test Argo CD Connection
        run: |
          curl -k -I https://${{ secrets.ARGOCD_SERVER }} || echo "⚠️ ArgoCD server is not reachable"

      - name: Login to Argo CD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure --grpc-web

      - name: Ensure Guestbook App is Registered
        run: |
          if argocd app get guestbook > /dev/null 2>&1; then
            echo "✅ guestbook 애플리케이션이 이미 존재합니다."
          else
            echo "🚀 guestbook 애플리케이션을 ArgoCD에 등록합니다."
            argocd app create guestbook \
              --repo https://github.com/ykim73094/argocd-example-apps.git \
              --path guestbook \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace default \
              --sync-policy automated

      - name: Enable Auto-Sync in ArgoCD
        run: |
          argocd app set guestbook --sync-policy automated --auto-prune --self-heal

      - name: Trigger Argo CD Sync
        run: |
          argocd app sync guestbook --grpc-web --insecure
          argocd app wait guestbook --health --operation --timeout 300
