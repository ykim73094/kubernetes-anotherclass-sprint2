name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # ✅ main 브랜치에 Push될 때 실행

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=ykim73094/aks-test
          TAG=$(date +%s)
          docker build -t $IMAGE_NAME:$TAG ./docker-test
          docker push $IMAGE_NAME:$TAG
          echo "IMAGE=$IMAGE_NAME:$TAG" >> $GITHUB_ENV

  update-manifest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Update Deployment YAML
        run: |
          sed -i "s|image: .*|image: ${{ env.IMAGE }}|" k8s/deployment.yaml

      - name: Commit and Push Changes
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add k8s/deployment.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git fetch --all
            git rebase origin/main
            git commit -m "Update deployment image to ${{ env.IMAGE }}"
            git push origin main
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: update-manifest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Argo CD CLI (if not installed)
        run: |
          if ! command -v argocd &> /dev/null
          then
            echo "Installing ArgoCD CLI..."
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd-linux-amd64
            sudo mv argocd-linux-amd64 /usr/local/bin/argocd || mv argocd-linux-amd64 ~/argocd && export PATH=$HOME:$PATH
          else
            echo "Argo CD CLI already installed."
          fi

      - name: Login to Argo CD
        run: |
          echo "Trying to connect to ArgoCD at ${{ secrets.ARGOCD_SERVER }}"
          curl -k -I https://${{ secrets.ARGOCD_SERVER }} || echo "ArgoCD server is not reachable"
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure --grpc-web

      - name: Trigger Argo CD Sync
        run: |
          argocd app sync my-app --grpc-web --insecure
          argocd app wait my-app --health --operation --timeout 300
