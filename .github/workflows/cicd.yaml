name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      # build Job에서 생성한 이미지명을 update-manifest Job에서 사용하기 위해 저장
      image: ${{ steps.set-image.outputs.image }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Image Tag
        id: prepare-tag
        run: |
          # GitHub Actions에서 매 빌드마다 달라지는 유니크 태그를 만들 수 있음 (timestamp, short SHA 등)
          # 여기서는 타임스탬프 사용
          echo "TAG=$(date +%s)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        id: build_and_push
        uses: docker/build-push-action@v4
        with:
          context: ./docker-test
          push: true
          # 여러 태그를 동시에 Push 할 수 있습니다.
          # - latest 태그(선택사항)
          # - 타임스탬프 태그 (prepare-tag 단계에서 만든 TAG)
          tags: |
            ykim73094/aks-test:latest
            ykim73094/aks-test:${{ env.TAG }}

      - name: Set Output Image
        id: set-image
        run: |
          # update-manifest Job에서 사용하기 위해 최종 이미지 레퍼런스를 outputs로 넘김
          echo "image=ykim73094/aks-test:${{ env.TAG }}" >> $GITHUB_OUTPUT

  update-manifest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          # 실제로 YAML을 수정할 대상은 다른 Repo(ykim73094/argocd-example-apps)라고 했으므로 다음과 같이 설정
          fetch-depth: 0
          repository: ykim73094/argocd-example-apps
          token: ${{ secrets.GH_PAT }}

      - name: Update Deployment YAML
        run: |
          sed -i "s|image: .*|image: ${{ needs.build.outputs.image }}|" guestbook/guestbook-ui-deployment.yaml
          echo "🔍 Updated deployment.yaml:"
          cat guestbook/guestbook-ui-deployment.yaml  # 변경된 내용 출력
          
      - name: Commit and Push Changes
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          git fetch --all
          git checkout master  # 원격 저장소의 master 브랜치를 사용한다고 가정

          # 변경 사항 임시 저장
          git stash push -m "Temp changes" 

          # 최신 master 브랜치 가져오기
          git pull --rebase origin master

          # 임시 저장한 변경 사항 복원
          git stash pop || echo "No stash found"

          # 변경 사항 커밋/푸시
          git add guestbook/guestbook-ui-deployment.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update deployment image to ${{ needs.build.outputs.image }}"
            git push origin master
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: update-manifest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Test Argo CD Connection
        run: |
          curl -k -I https://${{ secrets.ARGOCD_SERVER }} || echo "ArgoCD server is not reachable"

      - name: Login to Argo CD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure \
            --grpc-web

      - name: Force Refresh Argo CD App
        run: |
          # 'argocd app refresh' 대신
          # 'argocd app get <APP_NAME> --refresh normal' 사용
          argocd app get guestbook --refresh normal --grpc-web --insecure

      - name: Trigger Argo CD Sync
        run: |
          argocd app sync guestbook --grpc-web --insecure
          argocd app wait guestbook --health --operation --timeout 300
