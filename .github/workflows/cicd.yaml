name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
    build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.image }}  # ‚úÖ GitHub ActionsÏùò outputsÎ°ú Ï†ÑÎã¨

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Image Tag
        id: prepare-tag
        run: |
          TAG=$(date +%s)
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        id: build_and_push
        uses: docker/build-push-action@v4
        with:
          context: ./docker-test
          push: true
          tags: |
            ykim73094/aks-test:latest
            ykim73094/aks-test:${{ env.TAG }}

      - name: Set Output Image
        id: set-image
        run: |
          IMAGE="ykim73094/aks-test:${{ env.TAG }}"
          echo "‚úÖ Setting output image: $IMAGE"
          echo "image=$IMAGE" >> $GITHUB_ENV   # ‚úÖ ÌôòÍ≤Ω Î≥ÄÏàòÎ°ú ÏÑ§Ï†ï
          echo "image=$IMAGE" >> $GITHUB_OUTPUT  # ‚úÖ GitHub Actions outputsÎ°ú ÏÑ§Ï†ï

  update-manifest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout ArgoCD Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: ykim73094/argocd-example-apps
          token: ${{ secrets.GH_PAT }}

      - name: Debug: Print received image
        run: |
          echo "‚úÖ Received image from build job: '${{ needs.build.outputs.image }}'"

      - name: Ensure image field exists & Update Deployment YAML
        run: |
          IMAGE="${{ needs.build.outputs.image }}"
          if [ -z "$IMAGE" ]; then
            echo "‚ö†Ô∏è ERROR: Docker image is empty! Exiting..."
            exit 1
          fi

          # 'image:' ÌïÑÎìúÍ∞Ä ÏóÜÎã§Î©¥ Ï∂îÍ∞Ä
          if ! grep -q "image:" guestbook/guestbook-ui-deployment.yaml; then
            echo "image: ykim73094/aks-test:latest" >> guestbook/guestbook-ui-deployment.yaml
          fi

          # Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
          sed -i "s|image: .*|image: $IMAGE|" guestbook/guestbook-ui-deployment.yaml

          echo "üîç Updated guestbook-ui-deployment.yaml:"
          cat guestbook/guestbook-ui-deployment.yaml

  deploy:
    runs-on: ubuntu-latest
    needs: update-manifest
    steps:
      - name: Checkout this repo (optional)
        uses: actions/checkout@v3

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 \
            https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Test Argo CD Connection
        run: |
          curl -k -I https://${{ secrets.ARGOCD_SERVER }} || echo "ArgoCD server is not reachable"

      - name: Login to Argo CD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure \
            --grpc-web

      - name: Force Refresh Argo CD App
        run: |
          # argocd app refresh <APP_NAME>Í∞Ä deprecatedÎêòÏóàÏúºÎØÄÎ°ú
          # argocd app get <APP_NAME> --refresh normal ÏÇ¨Ïö©
          argocd app get guestbook --refresh normal --grpc-web --insecure

      - name: Trigger Argo CD Sync
        run: |
          argocd app sync guestbook --grpc-web --insecure
          argocd app wait guestbook --health --operation --timeout 300
